{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/NamesHandler.js","components/Names.jsx","App.js","serviceWorker.js","index.js"],"names":["LOAD","DISPLAY","SELECTED","MOVE_UP","MOVE_DOWN","REMOVE","RENAMED","load","dispatch","type","xhr","XMLHttpRequest","open","responseType","addEventListener","names","response","display","send","initialState","requested","selectedIndex","NamesHandler","connect","state","namesRequested","indexLi","buttonLoad","selectedLi","index","selected","moveUp","moveDovn","moveDown","remove","renamed","props","react_default","a","createElement","react","map","name","key","onClick","Object","toConsumableArray","splice","disabled","items","length","defaultValue","onKeyDown","event","target","value","trim","store","createStore","arguments","undefined","action","objectSpread","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","es","components_NamesHandler","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ca952b8.chunk.js","sourcesContent":["export const LOAD = 'LOAD';\r\nexport const DISPLAY = 'DISPLAY';\r\nexport const SELECTED = 'SELECTED';\r\nexport const MOVE_UP = 'MOVE_UP';\r\nexport const MOVE_DOWN = 'MOVE_DOWN';\r\nexport const REMOVE = 'REMOVE';\r\nexport const RENAMED = 'RENAMED';\r\n\r\nexport function load() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: LOAD\r\n    });\r\n\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', 'http://my-json-server.typicode.com/mate-academy/literary-blog/authors')\r\n    xhr.responseType = 'json';\r\n    xhr.addEventListener('load', () => {\r\n      const names = xhr.response;\r\n      dispatch(display(names));\r\n    });\r\n    xhr.send();\r\n  };\r\n}\r\n\r\nexport function display(names) {\r\n  return {\r\n    type: DISPLAY,\r\n    names\r\n  };\r\n}\r\n\r\nexport function selected(index) {\r\n  return {\r\n    type: SELECTED,\r\n    index\r\n  };\r\n};\r\n\r\nexport function moveUp(names, index) {\r\n  return {\r\n    type: MOVE_UP,\r\n    names,\r\n    index\r\n  };\r\n}\r\n\r\nexport function moveDown(names, index) {\r\n  return {\r\n    type: MOVE_DOWN,\r\n    names,\r\n    index\r\n  };\r\n}\r\n\r\nexport function remove(names) {\r\n  return {\r\n    type: REMOVE,\r\n    names\r\n  };\r\n}\r\n\r\nexport function renamed(names) {\r\n  return {\r\n    type: RENAMED,\r\n    names\r\n  }\r\n}\r\n","import {\r\n  LOAD, DISPLAY,\r\n  SELECTED, MOVE_UP, MOVE_DOWN, REMOVE, RENAMED\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  requested: false,\r\n  names: null,\r\n  selectedIndex: null\r\n};\r\n\r\nexport function getNextState(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOAD:\r\n      return {\r\n        ...state,\r\n        requested: true\r\n      };\r\n    case DISPLAY:\r\n      return {\r\n        ...state,\r\n        names: action.names\r\n      };\r\n      case SELECTED:\r\n      return {\r\n          ...state,\r\n          selectedIndex: action.index\r\n        };\r\n        case MOVE_UP:\r\n      return {\r\n        ...state,\r\n        names: action.names,\r\n        selectedIndex: action.index\r\n      };\r\n      case MOVE_DOWN:\r\n      return {\r\n        ...state,\r\n        names: action.names,\r\n        selectedIndex: action.index\r\n      };\r\n      case REMOVE:\r\n      return {\r\n        ...state,\r\n        names: action.names,\r\n        selectedIndex: null\r\n      };\r\n      case RENAMED:\r\n      return {\r\n        ...state,\r\n        names: action.names,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport { load, selected, moveUp, moveDown, remove, renamed } from '../redux/actions'\r\nimport Names from \"./Names\";\r\n\r\nconst NamesHandler = connect(mapStateToProps, mapDispatchToProps)(Names);\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    namesRequested: state.requested,\r\n    names: state.names,\r\n    indexLi: state.selectedIndex\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    buttonLoad: () => dispatch(load()),\r\n    selectedLi: (index) => dispatch(selected(index)),\r\n    moveUp: (names, index) => dispatch(moveUp(names, index)),\r\n    moveDovn: (names, index) => dispatch(moveDown(names, index)),\r\n    remove: (names) => dispatch(remove(names)),\r\n    renamed: (names) => dispatch(renamed(names))\r\n  }\r\n}\r\n\r\nexport default NamesHandler;\r\n","import React, { Fragment } from 'react';\r\n\r\nexport default function Names(props) {\r\n  if (!props.namesRequested) {\r\n    return <button onClick={props.buttonLoad}>Load</button>\r\n  } else {\r\n    if (!props.names) {\r\n      return <span>loading...</span>\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <ul>{props.names.map((name, index) =>\r\n            <li key={name} onClick={() => props.selectedLi(index)}>\r\n              {name}\r\n              <button onClick={() => {\r\n                const names = [...props.names];\r\n                names.splice(props.indexLi, 1);\r\n                return props.remove(names)\r\n              }}>x</button>\r\n            </li>)}\r\n          </ul>\r\n          <button\r\n            disabled={!props.indexLi}\r\n            onClick={() => {\r\n              const names = [...props.names];\r\n              const items = names.splice(props.indexLi, 1);\r\n              names.splice(props.indexLi - 1, 0, items[0]);\r\n              return props.moveUp(names, props.indexLi - 1);\r\n            }}>Up</button>\r\n          <button\r\n            disabled={\r\n              props.indexLi === null || props.indexLi === props.names.length - 1}\r\n            onClick={() => {\r\n              const names = [...props.names];\r\n              const items = names.splice(props.indexLi, 1);\r\n              names.splice(props.indexLi + 1, 0, items[0]);\r\n              return props.moveUp(names, props.indexLi + 1);\r\n            }}>Down</button>\r\n          {props.indexLi !== null\r\n            && <input\r\n              type=\"text\"\r\n              defaultValue={props.names[props.indexLi]}\r\n              onKeyDown={(event) => {\r\n                const names = [...props.names];\r\n                names.splice(props.indexLi, 1);\r\n                names.splice(props.indexLi, 0, event.target.value.trim());\r\n                props.renamed(names);\r\n                if (event.key === 'Enter' && event.target.value.trim() === '') {\r\n                  const names = [...props.names];\r\n                  names.splice(props.indexLi, 1);\r\n                  return props.remove(names);\r\n                }\r\n              }\r\n              } />}\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { getNextState } from './redux/reducers';\nimport NamesHandler from './components/NamesHandler';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <NamesHandler />\n    </Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}